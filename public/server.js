"use strict";const s={};class e{constructor(){this.id="",this.x=250,this.y=250,this.speedX=0,this.speedY=0}update(){this.updatePosition()}updatePosition(){this.x+=this.speedX,this.y+=this.speedY}}class t extends e{constructor(s){super(),this.id=s,this.pressingRight=!1,this.pressingLeft=!1,this.pressingUp=!1,this.pressingDown=!1,this.maxSpeed=10,t.players[s]=this}update(){this.updateSpeed(),super.update()}updateSpeed(){this.pressingRight?this.speedX=this.maxSpeed:this.pressingLeft?this.speedX=-this.maxSpeed:this.speedX=0,this.pressingUp?this.speedY=-this.maxSpeed:this.pressingDown?this.speedY=this.maxSpeed:this.speedY=0}setPressingKey(s,e){"right"==s?this.pressingRight=e:"left"==s?this.pressingLeft=e:"up"==s?this.pressingUp=e:"down"==s&&(this.pressingDown=e)}static onConnect(s){const e=new t(s.id);s.on("keyPress",s=>{e.setPressingKey(s.inputId,s.state)})}static onDisconnect(s){delete t.players[s.id]}static updatePlayers(){const s=[];for(let e in t.players){let i=t.players[e];i.update(),s.push({id:i.id,x:i.x,y:i.y})}return s}}t.players={};const i=(s,e)=>(s=Math.ceil(s),e=Math.floor(e),Math.floor(Math.random()*(e-s+1))+s),n=()=>i(1e5,999999);setInterval(()=>{const s=t.updatePlayers();io.emit("newPosition",s)},40),module.exports={io:e=>{s[e.id]=e,console.log(`A user connected (${e.id})`),t.onConnect(e),e.emit("currentPlayers",t.players),e.broadcast.emit("newPlayer",t.players[e.id]),e.on("disconnect",()=>{console.log(`User disconnected (${e.id})`),delete s[e.id],t.onDisconnect(e),io.emit("disconnect",e.id)})}};